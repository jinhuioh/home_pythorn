# 문제
# 신종 바이러스인 웜 바이러스는 네트워크를 통해 전파된다. 한 컴퓨터가 웜 바이러스에 걸리면
# 그 컴퓨터와 네트워크 상에서 연결되어 있는 모든 컴퓨터는 웜 바이러스에 걸리게 된다.
#
# 예를 들어 7대의 컴퓨터가 <그림 1>과 같이 네트워크 상에서 연결되어 있다고 하자.
# 1번 컴퓨터가 웜 바이러스에 걸리면 웜 바이러스는 2번과 5번 컴퓨터를 거쳐 3번과 6번 컴퓨터까지 전파되어
# 2, 3, 5, 6 네 대의 컴퓨터는 웜 바이러스에 걸리게 된다. 하지만 4번과 7번 컴퓨터는 1번 컴퓨터와 네트워크상에서
# 연결되어 있지 않기 때문에 영향을 받지 않는다.
#
#
#
# 어느 날 1번 컴퓨터가 웜 바이러스에 걸렸다. 컴퓨터의 수와 네트워크 상에서 서로 연결되어 있는 정보가 주어질 때,
# 1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 출력하는 프로그램을 작성하시오.
#
# 입력
# 첫째 줄에는 컴퓨터의 수가 주어진다. 컴퓨터의 수는 100 이하이고 각 컴퓨터에는 1번 부터 차례대로 번호가 매겨진다.
# 둘째 줄에는 네트워크 상에서 직접 연결되어 있는 컴퓨터 쌍의 수가 주어진다.
# 이어서 그 수만큼 한 줄에 한 쌍씩 네트워크 상에서 직접 연결되어 있는 컴퓨터의 번호 쌍이 주어진다.
#
# 출력
# 1번 컴퓨터가 웜 바이러스에 걸렸을 때, 1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 첫째 줄에 출력한다.
from sys import stdin

# bfs.dfs는 무조건 0으로 된 초기값 인덱스를 만들어주자.
n = int(stdin.readline())
m = int(stdin.readline())
graph = [[] for _ in range(n+1)]
#탐색한 경우 1로 바꿀 초기값 리스트
answer = [0 for _ in range(n+1)]
for i in range(m):
    a,b  = map(int, stdin.readline().split())
    # 서로 연결되어 있는지 판단해야하므로 양방향으로 append해준다.
    #(7번째 인덱스에 9를 넣는경우와, 9번째 인덱스에 7을 넣는경우 둘 다 생각해줘야함. 탐색과정에서 한 쪽만 탐색해서,
    # 즉 7번째 인덱스에 9를 넣었는데, 탐색은 9번째 인덱스만 할 경우가 있기 때문..)
    graph[a].append(b)
    graph[b].append(a)

def bfs(k):#k=1이 들어가서 1번째 graph의 인덱스부터 탐색할 예정
    #탐색했으니 1로 바꿈
    answer[k] = 1
    for i in graph[k]:
        # graph[i]
        #탐색한 적 없다면
        if answer[i] ==0:
            #재귀호출
            bfs(i)

bfs(1)
print(answer.count(1)-1)

#풀이 느낀점.
# 답은 맞았는데 탐색하면서 지나간 숫자를 전부 list에 append해서 시간초과,메모리초과,런타임에러(재귀계속 호출)등이 발생했다.
# 위 풀이와 같이, 0으로 된 초기값 리스트를 생성하고
# 방문했을시에 1로 바꿔주는 방법이 더 효율적이라는것을 알게 되었다.
# 그리고 방문한 적이 없는 경우에 대해서만 재귀호출을 하는것이 런타임에러를 피할 수 있다는 것을 알았다.